Buat folder dengan CMD 
> mkdir nama folder
> cd nama folde
> code . --> BUKA vs CODE

1. install package.json
    > npm init --y

2. Nodemon
    Tools pertama adalah nodemon, ia bisa dikatakan wajib digunakan selama proses pengembangan. 
    Pasalnya, dengan tools ini kita tak perlu menjalankan ulang server ketika terjadi perubahan pada berkas JavaScript. 
    Nodemon akan mendeteksi perubahan kode JavaScript dan mengeksekusi ulang secara otomatis.

    Untuk menggunakannya, pasanglah package nodemon pada devDependencies dengan mengeksekusi perintah berikut di Terminal proyek:

    > npm install nodemon --save-dev

    -- Biarkan nodemon tetap berjalan agar bila terjadi perubahan kode, kita tidak perlu menjalankan ulang server.

3. ESLint
    Tools yang kedua adalah ESLint, 
    ia dapat membantu atau membimbing Anda untuk selalu menuliskan kode JavaScript dengan gaya yang konsisten.

    Untuk menggunakan ESLint, pasanglah package ESLint pada devDependencies proyek Anda. Caranya, silakan eksekusi perintah berikut di Terminal:

    > npm install eslint --save-dev

    Sebelum digunakan, Anda perlu melakukan konfigurasi terlebih dahulu. Caranya dengan menggunakan perintah berikut di Terminal proyek.

    > npx eslint --init

   --- Kemudian Anda akan diberikan beberapa pertanyaan, silakan jawab pertanyaan yang ada dengan jawaban berikut:

        How would you like to use ESLint? -> To check, find problems, and enforce code style.
        What type of modules does your project use? -> CommonJS (require/exports).
        Which framework did you use? -> None of these. 
        Does your project use TypeScript? -> N.
        Where does your code run? -> Node (pilih menggunakan spasi).
        How would you like to define a style for your project? -> Use a popular style guide.
        Which style guide do you want to follow? -> (Anda bebas memilih, sebagai contoh pilih AirBnB).
        What format do you want your config file to be in? -> JSON.
        Would you like to â€¦â€¦ (seluruh pertanyaan selanjutnya) -> Y.

        maka akan terbentuk berkas konfigurasi eslint dengan nama .eslintrc.json.

    --- Setelah membuat konfigurasi ESLint, 
        selanjutnya kita gunakan ESLint untuk memeriksa kode JavaScript yang ada pada proyek. 
        Namun sebelum itu, kita perlu menambahkan npm runner berikut di dalam berkas package.json:

          "lint": "eslint ./"
        
        > Jalankan perintah : npm run lint

4. Struktur proyek
   prinsip single responsibility approach. Artinya, kita gunakan satu berkas JavaScript untuk satu tujuan saja. 

        server.js : Memuat kode untuk membuat, mengonfigurasi, dan menjalankan server HTTP menggunakan Hapi.
        routes.js : Memuat kode konfigurasi routing server seperti menentukan path, method, dan handler yang digunakan.
        handler.js : Memuat seluruh fungsi-fungsi handler yang digunakan pada berkas routes.
        notes.js : Memuat data notes yang disimpan dalam bentuk array objek.

    Semua berkas JavaScript yang kita buat akan disimpan di dalam folder src. Hal ini bertujuan agar terpisah dari berkas konfigurasi proyek 
    seperti .eslintrc.json, package.json, package-lock.json, dan node_modules.

5. Membuat HTTP Server
    Mari kita mulai dengan membuat HTTP server menggunakan Hapi framework.
    > npm install @hapi/hapi